<?xml version="1.0"?>
<doc>
<assembly>
<name>
Assassin
</name>
</assembly>
<members>
<member name="T:Assassin.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Assassin.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Assassin.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Assassin.My.Resources.Resources.Assassin">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Assassin.My.Resources.Resources.Question_25px">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.VerifyDatabaseIntegrity">
 <summary>Verifies that the requested database exists and that its file size is greater than zero. If not, it extracts the embedded database file to the local output folder.</summary>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.ChangeAdminPassword(System.String)">
 <summary>Changes the admin password in the database.</summary>
 <param name="newPass">New password</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadAdminPasssword">
 <summary>Loads the Admin password from the database.</summary>
 <returns>Admin password</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadArmor">
 <summary>Loads all Armor from the database.</summary>
 <returns>All Armor</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadEnemies">
 <summary>Loads all Enemies from the database.</summary>
 <returns>All Enemies</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadGuilds">
 <summary>Loads all Guilds from the database.</summary>
 <returns>All Guilds</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadFood">
 <summary>Loads all Food from the database.</summary>
 <returns>All Food</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadDrinks">
 <summary>Loads all Drinks from the database.</summary>
 <returns>All Drinks</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadPotions">
 <summary>Loads all Potions from the database.</summary>
 <returns>All Potions</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadRanks">
 <summary>Loads all Ranks from the database.</summary>
 <returns>All Ranks</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadUser(System.String)">
 <summary>Loads a User from the database.</summary>
 <param name="name">User to be loaded</param>
 <returns>User</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadUsers">
 <summary>Loads all Users from the database.</summary>
 <returns>All Users</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.LoadWeapons">
 <summary>Loads all Weapons from the database.</summary>
 <returns>All Weapons</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.NewUser(Assassin.Classes.Entities.User)">
 <summary>Adds a User.</summary>
 <param name="userNew">User to be added</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.SaveUser(Assassin.Classes.Entities.User)">
 <summary>Saves a User.</summary>
 <param name="userSave">User to be saved</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.SaveUser(Assassin.Classes.Entities.User,System.String)">
 <summary>Changes an User's name and then saves the User to the database.</summary>
 <param name="userSave">User to be saved</param>
 <param name="newName">New name for User</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.SaveEnemy(Assassin.Classes.Entities.Enemy,System.String)">
 <summary>Changes an Enemy's name and then saves the Enemy to the database.</summary>
 <param name="enemySave">Enemy to be saved</param>
 <param name="newName">New name for Enemy</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.SaveEnemy(Assassin.Classes.Entities.Enemy)">
 <summary>Saves an Enemy to the database.</summary>
 <param name="enemySave">Enemy to be saved</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.MemberJoinsGuild(Assassin.Classes.Entities.User,Assassin.Classes.Entities.Guild)">
 <summary>Member of a Guild gains membership with that Guild, applied to database.</summary>
 <param name="joinUser">User joining the Guild.</param>
 <param name="joinGuild">Guild being joined</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.MemberLeavesGuild(Assassin.Classes.Entities.User,Assassin.Classes.Entities.Guild)">
 <summary>Member of a Guild terminates membership with that Guild, applied to database.</summary>
 <param name="leaveUser">User leaving the Guild.</param>
 <param name="leaveGuild">Guild being left</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.IDatabaseInteraction.SaveGuild(Assassin.Classes.Entities.Guild)">
 <summary>Saves a Guild.</summary>
 <param name="guildSave">Guild to be saved</param>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.VerifyDatabaseIntegrity">
 <summary>Verifies that the requested database exists and that its file size is greater than zero. If not, it extracts the embedded database file to the local output folder.</summary>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.ChangeAdminPassword(System.String)">
 <summary>Changes the admin password in the database.</summary>
 <param name="newPass">New password</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadAdminPasssword">
 <summary>Loads the Admin password from the database.</summary>
 <returns>Admin password</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadArmor">
 <summary>Loads all Armor from the database.</summary>
 <returns>All Armor</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadEnemies">
 <summary>Loads all Enemies from the database.</summary>
 <returns>All Enemies</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadGuilds">
 <summary>Loads all Guilds from the database.</summary>
 <returns>All Guilds</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadGuildApplicants(Assassin.Classes.Entities.Guild)">
 <summary>Loads all applicants for a selected <see cref="T:Assassin.Classes.Entities.Guild"/>.</summary>
 <param name="currentGuild"><see cref="T:Assassin.Classes.Entities.Guild"/> whose applicants are to be loaded</param>
 <returns>All applicants for a selected <see cref="T:Assassin.Classes.Entities.Guild"/></returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadMessages(Assassin.Classes.Entities.User)">
 <summary>Loads all <see cref="T:Assassin.Message"/>s for specified <see cref="T:Assassin.Classes.Entities.User"/>.</summary>
 <param name="loadUser"><see cref="T:Assassin.Classes.Entities.User"/> whose <see cref="T:Assassin.Message"/>s are to be loaded</param>
 <returns>List of all <see cref="T:Assassin.Message"/>s for the specified <see cref="T:Assassin.Classes.Entities.User"/></returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadFood">
 <summary>Loads all Food from the database.</summary>
 <returns>All Food</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadDrinks">
 <summary>Loads all Drinks from the database.</summary>
 <returns>All Drinks</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadPotions">
 <summary>Loads all Potions from the database.</summary>
 <returns>All Potions</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadRanks">
 <summary>Loads all Ranks from the database.</summary>
 <returns>All Ranks</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadUser(System.String)">
 <summary>Loads a User from the database.</summary>
 <param name="name">User to be loaded</param>
 <returns>User</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadUsers">
 <summary>Loads all Users from the database.</summary>
 <returns>All Users</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.LoadWeapons">
 <summary>Loads all Weapons from the database.</summary>
 <returns>All Weapons</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.AssignUserFromDataRow(System.Data.DataRow)">
 <summary>Assigns a user from a DataRow.</summary>
 <param name="dr">DataRow containing User</param>
 <returns>Assigned User</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.NewUser(Assassin.Classes.Entities.User)">
 <summary>Adds a User.</summary>
 <param name="userNew">User to be added</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.SaveUser(Assassin.Classes.Entities.User)">
 <summary>Saves a User.</summary>
 <param name="userSave">User to be saved</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.SaveUser(Assassin.Classes.Entities.User,System.String)">
 <summary>Changes an User's name and then saves the User to the database.</summary>
 <param name="userSave">User to be saved</param>
 <param name="newName">New name for User</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.SaveEnemy(Assassin.Classes.Entities.Enemy)">
 <summary>Saves an Enemy to the database.</summary>
 <param name="enemySave">Enemy to be saved</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.SaveEnemy(Assassin.Classes.Entities.Enemy,System.String)">
 <summary>Changes an Enemy's name and then saves the Enemy to the database.</summary>
 <param name="enemySave">Enemy to be saved</param>
 <param name="newName">New name for Enemy</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.MemberJoinsGuild(Assassin.Classes.Entities.User,Assassin.Classes.Entities.Guild)">
 <summary>Member of a Guild gains membership with that Guild, applied to database.</summary>
 <param name="joinUser">User joining the Guild.</param>
 <param name="joinGuild">Guild being joined</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.MemberLeavesGuild(Assassin.Classes.Entities.User,Assassin.Classes.Entities.Guild)">
 <summary>Member of a Guild terminates membership with that Guild, applied to database.</summary>
 <param name="leaveUser">User leaving the Guild.</param>
 <param name="leaveGuild">Guild being left</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.Database.SQLiteDatabaseInteraction.SaveGuild(Assassin.Classes.Entities.Guild)">
 <summary>Saves a Guild.</summary>
 <param name="guildSave">Guild to be saved</param>
</member>
<member name="F:Assassin.Classes.Enums.Stance.Normal">
 <summary>1 stamina cost, 1x weapon damage</summary>
</member>
<member name="F:Assassin.Classes.Enums.Stance.Berserk">
 <summary>2 stamina cost, 2x weapon damage</summary>
</member>
<member name="F:Assassin.Classes.Enums.Stance.Lunge">
 <summary>1 stamina cost, 1.5x damage, 1/2 defense</summary>
</member>
<member name="F:Assassin.Classes.Enums.Stance.Parry">
 <summary>0 stamina cost, potentially 1x damage</summary>
</member>
<member name="F:Assassin.Classes.Enums.Stance.Flee">
 <summary>1 stamina cost, chance to run away</summary>
</member>
<member name="F:Assassin.Classes.Enums.Stance.Defend">
 <summary>Regain 1 stamina, 2x defense</summary>
</member>
<member name="M:Assassin.Classes.Items.Drink.#ctor">
 <summary>Initializes a new instance of the Drink class.</summary>
</member>
<member name="M:Assassin.Classes.Items.Drink.#ctor(System.String,System.Int32,System.Int32)">
 <summary>Initializes a new instance of the Drink class using Property values.</summary>
 <param name="newName">Name of Drink</param>
 <param name="newRestoreThirst">Amount the Drink heals the User</param>
 <param name="newValue">Gold value of Drink</param>
</member>
<member name="M:Assassin.Classes.Items.Drink.#ctor(Assassin.Classes.Items.Drink)">
 <summary>Initializes a new instance of the Drink using another Drink.</summary>
 <param name="other">Drink to replace this instance</param>
</member>
<member name="M:Assassin.Classes.Items.Food.#ctor">
 <summary>Initializes a new instance of the Food class.</summary>
</member>
<member name="M:Assassin.Classes.Items.Food.#ctor(System.String,System.Int32,System.Int32)">
 <summary>Initializes a new instance of the Food class using Property values.</summary>
 <param name="newName">Name of Food</param>
 <param name="newRestoreHunger">Amount the Food heals the User</param>
 <param name="newValue">Gold value of Food</param>
</member>
<member name="M:Assassin.Classes.Items.Food.#ctor(Assassin.Classes.Items.Food)">
 <summary>Initializes a new instance of the Food using another Food.</summary>
 <param name="other">Food to replace this instance</param>
</member>
<member name="M:Assassin.Classes.Items.Potion.#ctor">
 <summary>Initializes a new instance of the Potion class.</summary>
</member>
<member name="M:Assassin.Classes.Items.Potion.#ctor(System.String,System.Int32,System.Int32)">
 <summary>Initializes a new instance of the Potion class using Property values.</summary>
 <param name="newName">Name of Potion</param>
 <param name="newHealAmount">Amount the Potion heals the User</param>
 <param name="newValue">Gold value of Potion</param>
</member>
<member name="M:Assassin.Classes.Items.Potion.#ctor(Assassin.Classes.Items.Potion)">
 <summary>Initializes a new instance of the Potion using another Potion.</summary>
 <param name="other">Potion to replace this instance</param>
</member>
<member name="M:Assassin.Classes.Items.Armor.#ctor">
 <summary>Initializes a default instance of Armor.</summary>
</member>
<member name="M:Assassin.Classes.Items.Armor.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
 <summary>Initializes a new instance of Armor by assigning Property values.</summary>
 <param name="newName">Name</param>
 <param name="newDefense">Defense</param>
 <param name="newValue">Value</param>
 <param name="newHidden">Hidden?</param>
</member>
<member name="M:Assassin.Classes.Items.Armor.#ctor(Assassin.Classes.Items.Armor)">
 <summary>Replaces this instance of Armor with a new instance.</summary>
 <param name="otherArmor">Instance of Armor to replace this instance.</param>
</member>
<member name="M:Assassin.Classes.Items.Weapon.#ctor">
 <summary>Initializes a default instance of Weapon.</summary>
</member>
<member name="M:Assassin.Classes.Items.Weapon.#ctor(System.String,System.Int32,System.Int32,System.Boolean,Assassin.Classes.Enums.WeaponType)">
 <summary>Initializes a new instance of Weapon by assigning Property values.</summary>
 <param name="newName">Name</param>
 <param name="newDamage">Damage</param>
 <param name="newValue">Value</param>
 <param name="newHidden">Hidden?</param>
 <param name="newType">Type</param>
</member>
<member name="M:Assassin.Classes.Items.Weapon.#ctor(Assassin.Classes.Items.Weapon)">
 <summary>Replaces this instance of Weapon with a new instance.</summary>
 <param name="otherWeapon">Instance of Weapon to replace this instance.</param>
</member>
<member name="M:Assassin.Classes.Entities.Guild.#ctor">
 <summary>Initializes a new instance of the Guild class.</summary>
</member>
<member name="M:Assassin.Classes.Entities.Guild.#ctor(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Initializes a new instance of the Guild class using Property values.</summary>
 <param name="newID">ID of Guild</param>
 <param name="newName">Name of Guild</param>
 <param name="newMaster">Name of Guildmaster</param>
 <param name="newFee">Fee to enter Guild</param>
 <param name="newGold">Amount of Gold owned by Guild</param>
 <param name="newMembers">Names of Users who are a member of the Guild</param>
 <param name="newHenchmenLevel1">Amount of Level 1 Henchmen the Guild employs</param>
 <param name="newHenchmenLevel2">Amount of Level 2 Henchmen the Guild employs</param>
 <param name="newHenchmenLevel3">Amount of Level 3 Henchmen the Guild employs</param>
 <param name="newHenchmenLevel4">Amount of Level 4 Henchmen the Guild employs</param>
 <param name="newHenchmenLevel5">Amount of Level 5 Henchmen the Guild employs</param>
</member>
<member name="M:Assassin.Classes.Entities.Enemy.TakeDamage(System.Int32)">
 <summary>The Enemy takes damage.</summary>
 <param name="damage">Amount of damage taken.</param>
 <returns>String saying the Enemy took damage</returns>
</member>
<member name="M:Assassin.Classes.Entities.Enemy.#ctor">
 <summary>Initializes a new instance of the Enemy class.</summary>
</member>
<member name="M:Assassin.Classes.Entities.Enemy.#ctor(System.String,System.Int32,System.Int32,System.Int32,Assassin.Classes.Items.Weapon,Assassin.Classes.Items.Armor,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Initializes a new instance of the Enemy class by assigning Property values.</summary>
 <param name="newName">Name of Enemy</param>
 <param name="newLevel">Level of Enemy</param>
 <param name="newCurrentEndurance">Amount of Endurance the Enemy currently has</param>
 <param name="newMaximumEndurance">Maximum amount of Endurance the Enemy can have</param>
 <param name="newWeapon">Weapon equipped by the Enemy</param>
 <param name="newArmor">Armor equipped by the Enemy</param>
 <param name="newGoldOnHand">Amount of Gold the Enemy is currently carrying</param>
 <param name="newWeaponSkill">Amount of skill the Enemy has with their Weapon</param>
 <param name="newBlocking">Amount of skill the Enemy has with blocking incoming attacks</param>
 <param name="newSlipping">Amount of skill the Enemy has with dodging attacks and fleeing battles</param>
</member>
<member name="M:Assassin.Classes.Entities.Enemy.#ctor(Assassin.Classes.Entities.Enemy)">
 <summary>
 Replaces this instance of Enemy with another instance.
 </summary>
 <param name="otherEnemy">Enemy to replace this instance</param>
</member>
<member name="T:Assassin.Classes.Entities.User">
 <summary>Represents a character in the game.</summary>
</member>
<member name="M:Assassin.Classes.Entities.User.GainExperience(System.Int32)">
 <summary>Gains experience for the User.</summary>
 <param name="experienceGain">Experience gained</param>
 <returns>String based on experience gain</returns>
</member>
<member name="M:Assassin.Classes.Entities.User.Heal(System.Int32)">
 <summary>The User heals damage.</summary>
 <param name="healAmount">Amount of health restored.</param>
 <returns>String saying you took damage</returns>
</member>
<member name="M:Assassin.Classes.Entities.User.TakeDamage(System.Int32)">
 <summary>The User takes damage.</summary>
 <param name="damage">Amount of damage taken.</param>
 <returns>String saying you took damage</returns>
</member>
<member name="M:Assassin.Classes.Entities.User.#ctor">
 <summary>Initializes a new instance of the User class.</summary>
</member>
<member name="M:Assassin.Classes.Entities.User.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Assassin.Classes.Enums.WeaponType,Assassin.Classes.Items.Weapon,Assassin.Classes.Items.Weapon,Assassin.Classes.Items.Weapon,Assassin.Classes.Items.Armor,Assassin.Classes.Items.Potion,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Initializes a new instance of the User class using Property values.</summary>
 <param name="newName">Name of User</param>
 <param name="newPassword">Hashed password of User</param>
 <param name="newLevel">Level of User</param>
 <param name="newExperience">Amount of experience the User has</param>
 <param name="newSkillPoints">Amount of skill points the User has</param>
 <param name="newAlive">Is the User alive?</param>
 <param name="newCurrentLocation">Location the User slept at last</param>
 <param name="newCurrentEndurance">Amount of Endurance the User currently has</param>
 <param name="newMaximumEndurance">Maximum amount of Endurance the User can have at the moment</param>
 <param name="newHunger">Amount of hunger the User currently has</param>
 <param name="newThirst">Amount of thirst the User currently has</param>
 <param name="newCurrentWeapon">Type of Weapon the User currently has equipped</param>
 <param name="newLightWeapon">Weapon the User has in their Light Weapon slot</param>
 <param name="newHeavyWeapon">Weapon the User has in their Heavy Weapon slot</param>
 <param name="newTwoHandedWeapon">Weapon the User has in their Two-Handed Weapon slot</param>
 <param name="newArmor">Armor the User has equipped</param>
 <param name="newPotion">Potion the User is carrying</param>
 <param name="newLockpicks">Amount of lockpicks the User currently has</param>
 <param name="newGoldOnHand">Amount of gold the User is currently carrying</param>
 <param name="newGoldInBank">Amount of gold the User has stored in the Bank</param>
 <param name="newGoldOnLoan">Amount of unpaid gold the User has borrowed from the Bank</param>
 <param name="newShovel">Does the User own a shovel?</param>
 <param name="newLantern">Does the User own a lantern?</param>
 <param name="newAmulet">Does the User own an amulet?</param>
 <param name="newLightWeaponSkill">Amount of skill the User has with Light Weapons</param>
 <param name="newHeavyWeaponSkill">Amount of skill the User has with Heavy Weapons</param>
 <param name="newTwoHandedWeaponSkill">Amount of skill the User has with Two-Handed Weapons</param>
 <param name="newBlocking">Amount of skill the User has with blocking incoming attacks</param>
 <param name="newSlipping">Amount of skill the User has with dodging attacks and fleeing battles</param>
 <param name="newStealth">Amount of skill the User has with surprising opponents, theft, and hiding</param>
 <param name="newHenchmenLevel1">Amount of Level 1 Henchmen employed by the User</param>
 <param name="newHenchmenLevel2">Amount of Level 2 Henchmen employed by the User</param>
 <param name="newHenchmenLevel3">Amount of Level 3 Henchmen employed by the User</param>
 <param name="newHenchmenLevel4">Amount of Level 4 Henchmen employed by the User</param>
 <param name="newHenchmenLevel5">Amount of Level 5 Henchmen employed by the User</param>
</member>
<member name="M:Assassin.Classes.Entities.User.#ctor(Assassin.Classes.Entities.User)">
 <summary>Initializes a new instance of the User class using another User.</summary>
 <param name="otherUser">User to replace this instance.</param>
</member>
<member name="T:Assassin.Classes.GameState">
 <summary>Represents the current state of the game.</summary>
</member>
<member name="M:Assassin.Classes.GameState.AddTextToTextBox(System.Windows.Forms.TextBox,System.String)">
 <summary>Adds a blank line between a TextBox's current text and the text to be added.</summary>
 <param name="tb">TextBox</param>
 <param name="newText">Text to be added</param>
</member>
<member name="M:Assassin.Classes.GameState.GetEnemy">
 <summary>Generates an enemy based on a player's current level.</summary>
</member>
<member name="M:Assassin.Classes.GameState.GetHunger(System.Int32)">
 <summary>Gets the hunger of a user and returns it as a String.</summary>
 <param name="hunger">Current hunger</param>
 <returns>String regarding hunger</returns>
</member>
<member name="M:Assassin.Classes.GameState.GetThirst(System.Int32)">
 <summary>Gets the thirst of a user and returns it as a String.</summary>
 <param name="thirst">Current thirst</param>
 <returns>String regarding thirst</returns>
</member>
<member name="M:Assassin.Classes.GameState.VerifyDatabaseIntegrity">
 <summary>Verifies that the requested database exists and that its file size is greater than zero. If not, it extracts the embedded database file to the local output folder.</summary>
</member>
<member name="M:Assassin.Classes.GameState.ChangeAdminPassword(System.String)">
 <summary>Changes the admin password in the database.</summary>
 <param name="newPass">New password</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadAdminPasssword">
 <summary>Loads the Admin password from the database.</summary>
 <returns>Admin password</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadAll">
 <summary>Loads almost everything required from the database.</summary>
</member>
<member name="M:Assassin.Classes.GameState.LoadArmor">
<summary>Loads all Armor from the database.</summary>
 <returns>All Armor</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadEnemies">
 <summary>Loads all Enemies from the database.</summary>
 <returns>All Enemies</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadGuilds">
 <summary>Loads all Guilds from the database.</summary>
 <returns>All Guilds</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadGuildApplicants(Assassin.Classes.Entities.Guild)">
 <summary>Loads all applicants for a selected <see cref="T:Assassin.Classes.Entities.Guild"/>.</summary>
 <param name="currentGuild"><see cref="T:Assassin.Classes.Entities.Guild"/> whose applicants are to be loaded</param>
 <returns>All applicants for a selected <see cref="T:Assassin.Classes.Entities.Guild"/></returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadFood">
 <summary>Loads all Food from the database.</summary>
 <returns>All Food</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadDrinks">
 <summary> Loads all Drinks from the database.</summary>
 <returns>All Drinks</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadPotions">
 <summary>Loads all Potions from the database.</summary>
 <returns>All Potions</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadRanks">
 <summary>Loads all Ranks from the database.</summary>
 <returns>All Ranks</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadUser(System.String)">
 <summary>Loads a User from the database.</summary>
 <param name="name">User to be loaded</param>
 <returns>User</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadUsers">
 <summary>Loads all Users from the database.</summary>
 <returns>All Users</returns>
</member>
<member name="M:Assassin.Classes.GameState.LoadWeapons">
 <summary>Loads all Weapons from the database.</summary>
 <returns>All Weapons</returns>
</member>
<member name="M:Assassin.Classes.GameState.NewUser(Assassin.Classes.Entities.User)">
 <summary>Adds a User.</summary>
 <param name="userNew">User to be added</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.GameState.SaveUser(Assassin.Classes.Entities.User)">
 <summary>Saves a User.</summary>
 <param name="userSave">User to be saved</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.GameState.SaveUser(Assassin.Classes.Entities.User,System.String)">
 <summary>Changes an User's name and then saves the User to the database.</summary>
 <param name="userSave">User to be saved</param>
 <param name="newName">New name for User</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.GameState.SaveEnemy(Assassin.Classes.Entities.Enemy)">
 <summary>Saves an Enemy to the database.</summary>
 <param name="enemySave">Enemy to be saved</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.GameState.SaveEnemy(Assassin.Classes.Entities.Enemy,System.String)">
 <summary>Changes an Enemy's name and then saves the Enemy to the database.</summary>
 <param name="enemySave">Enemy to be saved</param>
 <param name="newName">New name for Enemy</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.GameState.MemberJoinsGuild(Assassin.Classes.Entities.User,Assassin.Classes.Entities.Guild)">
 <summary>Member of a Guild gains membership with that Guild, applied to database.</summary>
 <param name="joinUser">User joining the Guild.</param>
 <param name="joinGuild">Guild being joined</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.GameState.MemberLeavesGuild(Assassin.Classes.Entities.User,Assassin.Classes.Entities.Guild)">
 <summary>Member of a Guild terminates membership with that Guild, applied to database.</summary>
 <param name="leaveUser">User leaving the Guild.</param>
 <param name="leaveGuild">Guild being left</param>
 <returns>True if successful</returns>
</member>
<member name="M:Assassin.Classes.GameState.SaveGuild(Assassin.Classes.Entities.Guild)">
 <summary>Saves a Guild.</summary>
 <param name="guildSave">Guild to be saved</param>
</member>
<member name="T:Assassin.Message">
 <summary>Represents a <see cref="T:Assassin.Message"/> sent to a <see cref="T:Assassin.Classes.Entities.User"/>.</summary>
</member>
<member name="P:Assassin.Message.UserFrom">
 <summary><see cref="T:Assassin.Classes.Entities.User"/> who sent the <see cref="T:Assassin.Message"/>.</summary>
</member>
<member name="P:Assassin.Message.UserTo">
 <summary><see cref="T:Assassin.Classes.Entities.User"/> to whom the <see cref="T:Assassin.Message"/> is written.</summary>
</member>
<member name="P:Assassin.Message.Contents">
 <summary>What the <see cref="T:Assassin.Message"/> says.</summary>
</member>
<member name="P:Assassin.Message.DateSent">
 <summary>Date the <see cref="T:Assassin.Message"/> was sent.</summary>
</member>
<member name="P:Assassin.Message.GuildMessage">
 <summary>Was this <see cref="T:Assassin.Message"/> sent by a guild leader?</summary>
</member>
<member name="M:Assassin.Message.#ctor(System.String,System.String,System.String,System.DateTime,System.Boolean)">
 <summary>Constructs a new instance of <see cref="T:Assassin.Message"/> by assigning property values.</summary>
 <param name="sentFrom"><see cref="T:Assassin.Classes.Entities.User"/> who sent the <see cref="T:Assassin.Message"/></param>
 <param name="sentTo"><see cref="T:Assassin.Classes.Entities.User"/> to whom the <see cref="T:Assassin.Message"/> is written</param>
 <param name="msg">What the <see cref="T:Assassin.Message"/> says</param>
 <param name="sent">Date the <see cref="T:Assassin.Message"/> was sent</param>
 <param name="guildMsg">Was this <see cref="T:Assassin.Message"/> sent by a guild leader?</param>
</member>
<member name="M:Assassin.Message.#ctor(Assassin.Message)">
 <summary>Constructs a new instance of <see cref="T:Assassin.Message"/> by copying another <see cref="T:Assassin.Message"/>.</summary>
 <param name="other"><see cref="T:Assassin.Message"/> to be copied</param>
</member>
<member name="M:Assassin.Forms.FrmBank.AddText(System.String)">
 <summary>Add text to the TextBox.</summary>
 <param name="newText">Text to be added</param>
</member>
<member name="M:Assassin.Forms.FrmBank.Display">
 <summary>Displays the current player's bank account.</summary>
</member>
<member name="M:Assassin.Forms.FrmJail.Display">
 <summary>Displays all the users currently in jail.</summary>
</member>
<member name="M:Assassin.Forms.FrmGame.Awaken">
 <summary>Displays the appropriate text when a user awakens.</summary>
</member>
<member name="M:Assassin.Forms.FrmMain.CheckLogin">
 <summary>Checks whether a valid login has occurred.</summary>
 <returns></returns>
</member>
<member name="M:Assassin.Forms.FrmMain.Login">
 <summary>When a valid login has occurred, log the character in.</summary>
</member>
<member name="M:Assassin.Forms.FrmAssassinate.NewEnemy">
 <summary>Gets a new Enemy.</summary>
</member>
</members>
</doc>
